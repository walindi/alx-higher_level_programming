===================
2-matrix_divided.py
===================

This module defines a function `matrix_divided(matrix, div)` that divides all elements of a matrix.

=====
Usage
=====
Function: `matrix_divided(matrix, div)`
Parameter matrix is a list of lists of integers or floats.
Parameter div (int or float) is the divisor.

All elements of the matrix are divide by `div` and rounded to 2 decimal places.
A new matrix is returned.

Import the function from the module `2-matrix_divided.py`
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Matrices
========

The parameter `matrix` must be a list of lists of intgers of floats, and Each row of the matrix must be of the same size.
Otherwise a TypeError is raised.

::
	>>> matrix = None
	>>> matrix_divided(matrix, 2)
	Traceback (most recent call last):
	  ...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

::

	>>> matrix = "not a list"
	>>> matrix_divided(matrix, 4)
	Traceback (most recent call last):
	 ...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

::
	>>> matrix = [["item", 2], [6, 4]]
	>>> matrix_divided(matrix, 7)
	Traceback (most recent call last):
	  ...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

::

	>>> matrix = [[6, 15], [12, 6, 18]]
	>>> matrix_divided(matrix, 2)
	Traceback (most recent call last):
	  ...
	TypeError: Each row of the matrix must have the same size

Divisors:
=========
The parameter `div` must either be an int or a float. Otherwise a TypeError is raised.

Positive divisor:
	>>> matrix_divided([[3, 6, 9], [12, 15, 18]], 3)
	[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

Negative divisor:
	>>> matrix_divided([[6, 9], [12, 15]], -3)
	[[-2.0, -3.0], [-4.0, -5.0]]

Zero divisor:
	>>> matrix_divided([[3, 6], [6, 15]], 0)
	Traceback (most recent call last):
	  ...
	ZeroDivisionError: division by zero

Non-number:
	>>> matrix_divided([[6, 3], [6, 6]], "string")
	Traceback (most recent call last):
	  ...
	TypeError: div must be a number

